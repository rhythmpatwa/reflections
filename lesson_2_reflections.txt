What happens when you initialize a repository? Why do you need to do it?
-When you initialize a repository a hidden .git file will be created in the directory where the repository was initialized. Creating a repository in the directory will help us keep tab on the development of different files in the repository and also track their history as in the changes made over the course of time since the repository was created.

How is the staging area different from the working directory and the repository? What value do you think it offers?
-Staging area is different from the wokring directory in the sense, staging area does not necessarily contain all the files of the working directory. Rather it will have only the files to be committed to the repository. All the files changed and not committed in the working directory and git add will add all these files to the staging area. The repository will have all the files on a commit that were present in the staging area. 

How can you use the staging area to make sure you have one commit per logical change?
-Whenever changes made to a file are not committed to the repository we can always check for changes made by a 'git diff' command which will notify changes made in the working directory but not yet added to the staging area. If the changed files have been added to the staging area, 'git diff --staged' will show the difference between the last commit and the staging area.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
-Branches would be helpful when we want to complete an entirely different implementation of my project and save the last working version. That would be an ideal case of using and maintaining branches. Checking out a new branch for a very different feature introduction will ensure a saved copy of the previous project version and help us independently work in the direction of implemeting the new feature.

How do the diagrams help you visualize the branch structure?
-Diagrams help us visualize the branch structure because it shows the point at which the new branch was formed and represents the commits of the parent and the branch individually making it clear to understand what is different in both the branches.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
-Pros:
* Saves your time, especially when each non-conflicting merge is trivial.
* Makes you concentrate on the changes which actually contain conflicts.
Cons:
* Can't thnink of any definite ones. Maybe can make it easier to overlook the potentially dangerous situation where two person are working on the same file at the same time.
